==============================
How to use 0-add_integer.py
==============================

The module has one function called "addinteger()".

Integers
========
"addinteger()" returns a value for a + b

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

Floats
=======
The function also works correctly for floats.

::
	>>> add_integer(2.0, 3)
	5

	>>> add_integer(2.0, 3.0)
	5

	>>> add_integer(3, 4.6)
	7


Strings and Other types
=======================
The funtion raises a TypeError exception for other types

::
	>>> add_integer("3", 2) #doctest: +ELLIPSIS
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer(3, "2") #doctest: +ELLIPSIS
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	
	>>> add_integer("3", "2") #doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: a must be an integer	

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer() #doctest: +ELLIPSIS
	Traceback (most recent call last):
		...
	TypeError: add_integer() missing 1 required positional argument: 'a'

	>>> add_integer(1000e1000) #doctest: +ELLIPSIS
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('nan')) #doctest: +ELLIPSIS
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer

